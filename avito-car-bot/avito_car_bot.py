import os
import logging
import sqlite3
from datetime import datetime
from typing import Dict, Optional

import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_ACTION, SETTING_URL, SETTING_PRICE = range(3)

class AvitoCarBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.logger = self.setup_logger()
        self.db_conn = self.setup_database()
        self.keyboard = [
            ['–î–æ–±–∞–≤–∏—Ç—å URL üîó', '–ú–æ–∏ URL üìã'],
            ['–£–¥–∞–ª–∏—Ç—å URL üóë', '–ü–æ–º–æ—â—å ‚ùì']
        ]
        self.markup = ReplyKeyboardMarkup(self.keyboard, resize_keyboard=True)

    def setup_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO
        )
        return logging.getLogger(__name__)

    def setup_database(self) -> sqlite3.Connection:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('avito_monitor.db')
        cursor = conn.cursor()
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS monitored_urls
        (user_id INTEGER, url TEXT, max_price INTEGER)
        ''')
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS found_ads
        (url TEXT, ad_id TEXT, UNIQUE(url, ad_id))
        ''')
        conn.commit()
        return conn

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
        self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ Avito.\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=self.markup
        )
        return CHOOSING_ACTION

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏"""
        self.logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –ü–æ–º–æ—â—å ‚ùì")
        await update.message.reply_text(
            "üîç –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ Avito.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å URL üîó - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π URL –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ –ú–æ–∏ URL üìã - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö URL\n"
            "‚Ä¢ –£–¥–∞–ª–∏—Ç—å URL üóë - —É–¥–∞–ª–∏—Ç—å URL –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ –ü–æ–º–æ—â—å ‚ùì - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ Avito –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
            "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –º–Ω–µ —á–µ—Ä–µ–∑ '–î–æ–±–∞–≤–∏—Ç—å URL üîó'\n"
            "4. –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–∏–ª–∏ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞)\n"
            "5. –ì–æ—Ç–æ–≤–æ! –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö",
            reply_markup=self.markup
        )
        return CHOOSING_ACTION

    async def add_url_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL"""
        self.logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –î–æ–±–∞–≤–∏—Ç—å URL üîó")
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –Ω–∞ Avito.\n"
            "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://www.avito.ru/",
            reply_markup=self.markup
        )
        return SETTING_URL

    async def handle_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ URL"""
        try:
            url = update.message.text.strip()
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω URL: {url}")
            
            if not url.startswith('http'):
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http:// –∏–ª–∏ https://\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.avito.ru/moskva/avtomobili"
                )
                return SETTING_URL
            
            if 'avito.ru' not in url:
                await update.message.reply_text(
                    "‚ùå URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å —Å–∞–π—Ç–∞ –ê–≤–∏—Ç–æ (avito.ru)\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.avito.ru/moskva/avtomobili"
                )
                return SETTING_URL
            
            if '/avtomobili' not in url:
                await update.message.reply_text(
                    "‚ùå URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.avito.ru/moskva/avtomobili"
                )
                return SETTING_URL
                
            context.user_data['url'] = url
            await update.message.reply_text(
                "‚úÖ URL –ø—Ä–∏–Ω—è—Ç!\n\n"
                "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —Ü–µ–Ω—É."
            )
            return SETTING_PRICE
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_url: {e}")
            await self.send_error_message(update)
            return CHOOSING_ACTION

    async def handle_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
        try:
            price_text = update.message.text.strip()
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞: {price_text}")
            
            try:
                max_price = int(price_text)
                if max_price < 0:
                    raise ValueError("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 500000"
                )
                return SETTING_PRICE

            url = context.user_data.get('url')
            if not url:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å URL –∑–∞–Ω–æ–≤–æ."
                )
                return CHOOSING_ACTION

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ —Ü–µ–Ω—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor = self.db_conn.cursor()
            cursor.execute(
                'INSERT INTO monitored_urls (user_id, url, max_price) VALUES (?, ?, ?)',
                (update.effective_user.id, url, max_price)
            )
            self.db_conn.commit()

            await update.message.reply_text(
                "‚úÖ –ì–æ—Ç–æ–≤–æ! –Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É URL.\n\n"
                f"URL: {url}\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {'–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π' if max_price == 0 else f'{max_price:,} ‚ÇΩ'}",
                reply_markup=self.markup
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL
            await self.check_new_ads(context, update.effective_user.id, url, max_price)
            
            return CHOOSING_ACTION

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_price: {e}")
            await self.send_error_message(update)
            return CHOOSING_ACTION

    async def list_urls(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö URL"""
        try:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –ú–æ–∏ URL üìã")
            cursor = self.db_conn.cursor()
            cursor.execute(
                'SELECT url, max_price FROM monitored_urls WHERE user_id = ?',
                (update.effective_user.id,)
            )
            urls = cursor.fetchall()

            if not urls:
                await update.message.reply_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö URL.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å URL üîó' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.",
                    reply_markup=self.markup
                )
            else:
                message = "üìã –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ URL:\n\n"
                for i, (url, max_price) in enumerate(urls, 1):
                    message += f"{i}. {url}\n"
                    message += f"   –ú–∞–∫—Å. —Ü–µ–Ω–∞: {'–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π' if max_price == 0 else f'{max_price:,} ‚ÇΩ'}\n\n"
                await update.message.reply_text(message, reply_markup=self.markup)

            return CHOOSING_ACTION

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ list_urls: {e}")
            await self.send_error_message(update)
            return CHOOSING_ACTION

    async def delete_url_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ URL –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –£–¥–∞–ª–∏—Ç—å URL üóë")
            cursor = self.db_conn.cursor()
            cursor.execute(
                'SELECT url FROM monitored_urls WHERE user_id = ?',
                (update.effective_user.id,)
            )
            urls = cursor.fetchall()

            if not urls:
                await update.message.reply_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                    reply_markup=self.markup
                )
            else:
                message = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
                for i, (url,) in enumerate(urls, 1):
                    message += f"{i}. {url}\n"
                await update.message.reply_text(message)
                context.user_data['urls_to_delete'] = urls
                return CHOOSING_ACTION

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_url_command: {e}")
            await self.send_error_message(update)
            return CHOOSING_ACTION

    async def handle_delete_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            urls = context.user_data.get('urls_to_delete', [])
            if not urls:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å URL –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=self.markup
                )
                return CHOOSING_ACTION

            try:
                choice = int(update.message.text.strip())
                if not (1 <= choice <= len(urls)):
                    raise ValueError
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä URL.",
                    reply_markup=self.markup
                )
                return CHOOSING_ACTION

            url_to_delete = urls[choice - 1][0]
            cursor = self.db_conn.cursor()
            cursor.execute(
                'DELETE FROM monitored_urls WHERE user_id = ? AND url = ?',
                (update.effective_user.id, url_to_delete)
            )
            self.db_conn.commit()

            await update.message.reply_text(
                f"‚úÖ URL —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:\n{url_to_delete}",
                reply_markup=self.markup
            )
            del context.user_data['urls_to_delete']
            return CHOOSING_ACTION

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_delete_choice: {e}")
            await self.send_error_message(update)
            return CHOOSING_ACTION

    async def check_new_ads(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, url: str, max_price: int) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        try:
            self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è URL: {url}")
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            response = requests.get(url, headers=headers)
            soup = BeautifulSoup(response.text, 'lxml')
            
            ads = soup.find_all('div', {'data-marker': 'item'})
            cursor = self.db_conn.cursor()
            
            for ad in ads:
                try:
                    ad_id = ad.get('data-item-id')
                    if not ad_id:
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–µ–ª–∏ –ª–∏ –º—ã —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω—å—à–µ
                    cursor.execute(
                        'SELECT 1 FROM found_ads WHERE url = ? AND ad_id = ?',
                        (url, ad_id)
                    )
                    if cursor.fetchone():
                        continue
                        
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    title = ad.find('h3', {'itemprop': 'name'}).text.strip()
                    price_elem = ad.find('meta', {'itemprop': 'price'})
                    if not price_elem:
                        continue
                    
                    price = int(price_elem.get('content', '0'))
                    if max_price > 0 and price > max_price:
                        continue
                        
                    link = 'https://www.avito.ru' + ad.find('a', {'data-marker': 'item-title'})['href']
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
                    cursor.execute(
                        'INSERT OR IGNORE INTO found_ads (url, ad_id) VALUES (?, ?)',
                        (url, ad_id)
                    )
                    self.db_conn.commit()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    message = (
                        f"üöó –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n\n"
                        f"üìå {title}\n"
                        f"üí∞ {price:,} ‚ÇΩ\n"
                        f"üîó {link}"
                    )
                    await context.bot.send_message(user_id, message)
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
                    continue
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ check_new_ads: {e}")

    async def send_error_message(self, update: Update) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=self.markup
        )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_TOKEN')
    if not token:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    bot = AvitoCarBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
    application = Application.builder().token(token).read_timeout(30).write_timeout(30).build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', bot.start),
            MessageHandler(filters.Regex('^–î–æ–±–∞–≤–∏—Ç—å URL üîó$'), bot.add_url_command),
            MessageHandler(filters.Regex('^–ú–æ–∏ URL üìã$'), bot.list_urls),
            MessageHandler(filters.Regex('^–£–¥–∞–ª–∏—Ç—å URL üóë$'), bot.delete_url_command),
            MessageHandler(filters.Regex('^–ü–æ–º–æ—â—å ‚ùì$'), bot.help_command),
        ],
        states={
            CHOOSING_ACTION: [
                MessageHandler(filters.Regex('^–î–æ–±–∞–≤–∏—Ç—å URL üîó$'), bot.add_url_command),
                MessageHandler(filters.Regex('^–ú–æ–∏ URL üìã$'), bot.list_urls),
                MessageHandler(filters.Regex('^–£–¥–∞–ª–∏—Ç—å URL üóë$'), bot.delete_url_command),
                MessageHandler(filters.Regex('^–ü–æ–º–æ—â—å ‚ùì$'), bot.help_command),
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_delete_choice),
            ],
            SETTING_URL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_url),
            ],
            SETTING_PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_price),
            ],
        },
        fallbacks=[
            CommandHandler('help', bot.help_command),
            MessageHandler(filters.Regex('^–ü–æ–º–æ—â—å ‚ùì$'), bot.help_command),
        ],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    application.run_polling() 